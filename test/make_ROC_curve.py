# From the data generated by make_ROC_data.py we can now construct a ROC curve.

# Imports
import numpy as np
import matplotlib.pyplot as plt
import os


# Function to get arrays of TPs and FPs from predictions and classes.
def get_ROC_curve(predictions, classes):

    n_values = len(classes)
    positives = classes > 0
    negatives = classes == 0
    n_positives = np.sum(positives)
    n_negatives = n_values - n_positives

    tps = np.array([])
    fps = np.array([])

    # For each threshold that was used we check how many TP and FP we would have gotten.
    for prediction in np.unique(predictions):
        print(prediction)

        tps = np.append(tps, np.sum((predictions >= prediction) & positives) / n_positives)
        fps = np.append(fps, np.sum((predictions >= prediction) & negatives) / n_negatives)

    # Sort by fps.
    inds = np.argsort(fps)

    return tps[inds], fps[inds]


# Load the data.
all_masks = np.load(os.path.join('../', 'results', 'all_masks.npy'))
all_masks_hat = np.load(os.path.join('../', 'results', 'all_masks_hat.npy'))

# Generate the points.
TP, FP = get_ROC_curve(all_masks_hat, all_masks)

# Plot.
plt.figure()
plt.plot(FP, TP)
plt.plot([0, 1], [0, 1], '--')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.show()
